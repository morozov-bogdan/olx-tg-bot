import asyncio
import logging
import sys
import keyboard
import fetch_olx_ads as foa
import arenda_olx_ads as arenda_oa


from bs4 import BeautifulSoup
from config import TOKEN
from aiogram import Bot, Dispatcher, html, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from datetime import datetime, timedelta


dp = Dispatcher()
last_search_time_article = {}
last_search_time_arenda = {}


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}")
    # await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name}", reply_markup=keyboard.kb_start)


@dp.message(Command('stop'))
async def stop_bot(message: Message):
    await message.answer('–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())


@dp.message(F.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–æ–≤–∞—Ä')
async def info_for_article(message: Message):
    pass


@dp.message(F.text.lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞')
async def check_seller(message: Message):
    pass


# @dp.message(F.text.lower() == '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞')
@dp.message(Command('search'))
async def search_article(message: Message):
    
    query = message.text.replace('/search', '').strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search")
        return
    

    current_datetime = datetime.now()

    if message.from_user.id in last_search_time_article: # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—â–∏ –≤ 30 —Å–µ–∫—É–Ω–¥
            last_time = last_search_time_article[message.from_user.id]
            if current_datetime - last_time < timedelta(seconds=30):
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
                return

    await message.answer(f"üîç –ò—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")
    ads = foa.get_olx_ads(query)


    for i in range(len(ads['title'])):
        await message.answer(f'{i+1}. <b>{ads['title'][i]}</b>\nüíµ {ads['price'][i]}\nüìç {ads['location_date'][i]}\nüîó https://www.olx.ua{ads['link'][i]}', 
                                parse_mode='HTML',
                                disable_web_page_preview=True,
                                disable_notification=True
        )
        if i+1 >= 20:
            break
    
    last_search_time_article[message.from_user.id] = current_datetime
    


@dp.message(Command('arenda'))
async def search_arenda(message: Message):
    args = message.text.split(maxsplit=3)[1:]

    if len(args) <= 0: 
        await message.reply('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <i>/arenda "–≥–æ—Ä–æ–¥" "–≤–∞–ª—é—Ç–∞"* "c–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"*</i>\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ "*", —è–≤–ª—è–µ—Ç—å—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ</b>', parse_mode='HTML')
        return

    arg1 = args[0]
    arg2 = args[1] if len(args) >= 2 else None
    arg3 = args[2] if len(args) >= 3 else None

    
    valid_city = False
    for c in arenda_oa.city_list:
        if arg1 == c:
            valid_city = True
            break
    if valid_city == False:
        await message.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–±–ª–∞—Å—Ç–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∏–µ–≤, –æ–¥–µ—Å—Å–∞, —Ö–∞—Ä—å–∫–æ–≤ –∏ —Ç.–¥.')
        return
            
    check_sort_keys = ['1', '2', '3']
    check_valid_currency = ['USD', 'UAH', '–Æ–°–î', '–Æ–ê–ù'] 

    if arg2 != None and arg2.lower() not in check_sort_keys:
        await message.reply("–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n1. –û—Ç –¥–µ—à—ë–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º\n2. –û—Ç –¥–æ—Ä–æ–≥–∏—Ö –∫ –¥–µ—à—ë–≤—ã–º\n3. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ")
        return
    if arg3 != None and arg3.upper() not in check_valid_currency:
        await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã —Ç–∞–∫–∏–µ –≤–∏–¥—ã –≤–∞–ª—é—Ç:\n'USD', 'UAH'")
        return


    current_datetime = datetime.now()
    if message.from_user.id in last_search_time_arenda:


        last_time = last_search_time_arenda[message.from_user.id]
        if current_datetime - last_time < timedelta(seconds=60):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            return


    ads = arenda_oa.get_olx_arenda(city=arg1, sort=arg2, currency=arg3)

    for i in range((len(ads['title']))):
        await message.answer(f'<b>{ads['title'][i]}</b>\nüíµ <b>{ads['price'][i]}</b>\nüìç {ads['location_date'][i]}\n<a href="https://www.olx.ua{ads['link'][i]}">–°—Å—ã–ª–∫–∞</a>',
                             parse_mode='HTML',
                             disable_notification=True)
        if i+1 >= 20:
            break
    
    last_search_time_arenda[message.from_user.id] = current_datetime


@dp.message(F.text.lower() == '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: Message):
    pass


@dp.message(F.text.lower() == '—Ç–µ—Ö.–ø–æ–¥–µ—Ä–∂–∫–∞')
async def create_tiket(message: Message):
    pass


async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())